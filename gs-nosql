#!/bin/bash
#
# REST API documentation:
# https://docs.gamesparks.com/api-documentation/nosql-rest-api.html
#
# This script has a dependency on jq: https://stedolan.github.io/jq/
# Make sure jq is installed on your system and is present in PATH.

### Colors ###

readonly RC='\033[0m' # Reset color

readonly BLACK='\033[0;30m'
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[0;33m'
readonly BLUE='\033[0;34m'
readonly MAGENTA='\033[0;35m'
readonly CYAN='\033[0;36m'
readonly WHITE='\033[0;37m'

readonly BRIGHT_BLACK='\033[1;30m'
readonly BRIGHT_RED='\033[1;31m'
readonly BRIGHT_GREEN='\033[1;32m'
readonly BRIGHT_YELLOW='\033[1;33m'
readonly BRIGHT_BLUE='\033[1;34m'
readonly BRIGHT_MAGENTA='\033[1;35m'
readonly BRIGHT_CYAN='\033[1;36m'
readonly BRIGHT_WHITE='\033[1;37m'

### End Colors ###

DEPENDENCIES=('jq')

readonly AUTH_URL='https://auth.gamesparks.net'
readonly CONFIG_URL='https://config2.gamesparks.net'

# Fill in these fields before using this script.
readonly USERNAME=''
readonly PASSWORD=''
readonly API_KEY=''
readonly STAGE=''

declare -a SYSTEM_COLLECTIONS
declare -a RUNTIME_COLLECTIONS

STAGE_BASE_URL=''
JWT=''

echo_error() {
  echo -e "${RED}[$(date +'%Y-%m-%dT%H:%M:%S%z')] Error: ${*}${RC}" >&2
}

check_dependencies() {
  for dependency in "${DEPENDENCIES[@]}"; do
    command -v "${dependency}" >/dev/null 2>&1

    if [[ "$?" -ne 0 ]]; then
      echo_error "'${dependency}' is not installed on your system or is not present in PATH."
      echo_error "'$(basename $0)' requires '${dependency}' to run."
      exit 1
    fi
  done
}

discover_endpoints() {
  echo -e "${MAGENTA}Discovering endpoints...${RC}\n"

  local command="curl --silent --user ${USERNAME}:${PASSWORD} -X GET --header 'Accept: application/json' ${CONFIG_URL}/restv2/game/${API_KEY}/endpoints"
  echo -e "> ${CYAN}${command}${RC}\n"

  local response
  response="$(eval "${command}")"

  # Pretty print JSON reponse
  eval "echo '${response}' | jq '.'"

  # Use jq --raw-output to remove get string without quotes.
  command="echo '${response}' | jq --raw-output '.${STAGE}Nosql'"
  STAGE_BASE_URL="$(eval "${command}")"
  readonly STAGE_BASE_URL
  echo -e "\n${YELLOW}Stage Base URL: ${STAGE_BASE_URL}${RC}"
}

auth_nosql() {
  echo -e "${MAGENTA}Authenticating user to access NoSQL database...${RC}\n"

  local filter='nosql'
  local command="curl --silent --user ${USERNAME}:${PASSWORD} -X GET --header 'Accept: application/json' ${AUTH_URL}/restv2/auth/game/${API_KEY}/jwt/${filter}"
  echo -e "> ${CYAN}${command}${RC}\n"

  local response
  response="$(eval "${command}")"

  # Pretty print JSON reponse
  eval "echo '${response}' | jq '.'"

  # Use jq --raw-output to remove get string without quotes.
  command="echo '${response}' | jq --raw-output '.\"X-GS-JWT\"'"
  JWT="$(eval "${command}")"
  readonly JWT
  echo -e "\n${YELLOW}JSON Web Token: ${JWT}${RC}"
}

list_collections() {
  echo -e "${MAGENTA}Listing NoSQL database collections...${RC}\n"

  local filter='nosql'
  local command="curl --silent -X GET --header 'Accept: application/json' --header 'X-GS-JWT: ${JWT}' ${STAGE_BASE_URL}/restv2/game/${API_KEY}/mongo/collections"
  echo -e "> ${CYAN}${command}${RC}\n"

  local response
  response="$(eval "${command}")"

  # Pretty print JSON reponse
  eval "echo '${response}' | jq '.'"

  # System collections

  # Use jq --raw-output to remove get string without quotes.
  # We base64 encode to get rid of spaces and newlines. Later on we will
  # base64 decode all the values.
  command="echo '${response}' | jq --raw-output '.[] | select(.optionGroup == \"System\") | .name | @base64'"

  local collection
  unset SYSTEM_COLLECTIONS

  for collection_base64 in $(eval "${command}"); do
    # We have to output this way to append newline character at the end.
    collection="$(echo "$(echo "${collection_base64}" | base64 --decode)")"
    SYSTEM_COLLECTIONS+=("${collection}")
  done

  echo -e "\n${YELLOW}System Collections: ${SYSTEM_COLLECTIONS[*]}${RC}"

  # Runtime collections

  # Use jq --raw-output to remove get string without quotes.
  # We base64 encode to get rid of spaces and newlines. Later on we will
  # base64 decode all the values.
  command="echo '${response}' | jq --raw-output '.[] | select(.optionGroup == \"Runtime\") | .name | @base64'"

  unset RUNTIME_COLLECTIONS

  for collection_base64 in $(eval "${command}"); do
    # We have to output this way to append newline character at the end.
    collection="$(echo "$(echo "${collection_base64}" | base64 --decode)")"
    RUNTIME_COLLECTIONS+=("${collection}")
  done

  echo -e "\n${YELLOW}Runtime Collections: ${RUNTIME_COLLECTIONS[*]}${RC}"

  # TODO(mubeeniqbal): Add Meta, Leaderboards and Running Totals collections.
}

remove_system_collection_documents() {
  echo -e "${MAGENTA}Removing documents from system collections...${RC}"

  for collection in "${SYSTEM_COLLECTIONS[@]}"; do
    echo -e "\n${YELLOW}Removing all documents from collection '${collection}' ...${RC}\n"

    local command="curl --silent -X POST --header 'Content-Type: application/json;charset=UTF-8' --header 'Accept: application/json' --header 'X-GS-JWT: ${JWT}' -d '{ \"query\": {} }' ${STAGE_BASE_URL}/restv2/game/${API_KEY}/mongo/collection/${collection}/remove"
    echo -e "> ${CYAN}${command}${RC}\n"

    local response
    response="$(eval "${command}")"

    # Pretty print JSON reponse
    eval "echo '${response}' | jq '.'"
  done
}

delete_runtime_collections() {
  echo -e "${MAGENTA}Deleting runtime collections...${RC}"

  for collection in "${RUNTIME_COLLECTIONS[@]}"; do
    echo -e "\n${YELLOW}Deleting collection '${collection}' ...${RC}\n"

    local command="curl --silent -X DELETE --header 'Accept: application/json' --header 'X-GS-JWT: ${JWT}' ${STAGE_BASE_URL}/restv2/game/${API_KEY}/mongo/collection/${collection}"
    echo -e "> ${CYAN}${command}${RC}\n"

    local response
    response="$(eval "${command}")"

    # Pretty print JSON reponse
    eval "echo '${response}' | jq '.'"
  done
}

nuke_nosql() {
  remove_system_collection_documents
  echo -e '\n--------------------\n'
  delete_runtime_collections
}

create_name_generator_data_collection() {
  local COLLECTION="nameGeneratorData";
  echo -e "${MAGENTA}Creating runtime collection 'script.${COLLECTION}' ...${RC}\n"

  local command="curl --silent -X POST --header 'Content-Type: application/json;charset=UTF-8' --header 'Accept: application/json' --header 'X-GS-JWT: ${JWT}' ${STAGE_BASE_URL}/restv2/game/${API_KEY}/mongo/collection/${COLLECTION}/runtime"
  echo -e "> ${CYAN}${command}${RC}\n"

  local response
  response="$(eval "${command}")"

  # Pretty print JSON reponse
  eval "echo '${response}' | jq '.'"

  local ADJECTIVES_DOCUMENT='{ "_id": "adjectives", "list": ["Able","Active","Adamant","Adept","Admired","Adored","Agile","Alert","Alien","Amazing","Amused","Ancient","Angelic","Antique","Apt","Aquatic","Arctic","Awesome","Beefy","Beloved","Berserk","Big","Blond","Blue","Boiling","Bold","Bossy","Bouncy","Brainy","Brave","Brawny","Breezy","Bright","Brisk","Broad","Bronze","Brown","Bubbly","Burly","Busy","Calm","Candid","Capable","Careful","Caring","Cheeky","Cheery","Chief","Chilly","Classic","Classy","Clean","Clear","Clever","Cold","Complex","Content","Cool","Crafty","Crazy","Crisp","Cruel","Cuddly","Curious","Curly","Cute","Cynical","Daring","Dark","Dashing","Deadly","Decent","Deep","Defiant","Digital","Dimpled","Dizzy","Double","Dutiful","Dynamic","Eager","Earnest","Earthy","Easy","Elastic","Elated","Elderly","Elegant","Elite","Equable","Ethical","Exalted","Excited","Exotic","Expert","Fair","Famous","Fancy","Fast","Feisty","Festive","Fierce","Fine","Firm","Flashy","Fluid","Focused","Fond","Formal","Frank","Frantic","Free","French","Fresh","Frosty","Frugal","Funny","Furry","Furtive","Fuzzy","General","Gentle","Genuine","Giant","Gifted","Glass","Gleeful","Glossy","Golden","Good","Grand","Gray","Great","Green","Grey","Grim","Groovy","Grown","Gusty","Handy","Hanging","Happy","Hard","Hasty","Heady","Hearty","Heavy","Hefty","Helpful","High","Homely","Honest","Honored","Hopeful","Huge","Hulking","Humble","Humming","Husky","Icy","Ideal","Immense","Jaunty","Jazzy","Jolly","Jovial","Joyful","Joyous","Jumbo","Keen","Kind","Kindly","Knowing","Known","Large","Last","Lavish","Lawful","Leading","Lean","Lethal","Light","Likable","Liquid","Lively","Lone","Lovely","Loving","Loyal","Lucky","Macho","Mad","Magenta","Magical","Major","Mammoth","Massive","Mellow","Melodic","Merry","Mighty","Minty","Misty","Modern","Modest","Moody","Natural","Naughty","Neat","New","Nice","Nifty","Nimble","Nippy","Notable","Novel","Oceanic","Optimal","Opulent","Orange","Orderly","Organic","Ornate","Pastel","Peppery","Perfect","Playful","Pleased","Plucky","Plush","Pointed","Polite","Popular","Posh","Premium","Pretty","Primary","Prime","Private","Proper","Proud","Prudent","Pure","Purple","Quick","Quiet","Quirky","Radiant","Rainy","Rapid","Rare","Real","Rebel","Red","Rich","Robust","Round","Royal","Sane","Savory","Scented","Secret","Seemly","Serene","Serious","Shadowy","Sharp","Shiny","Shy","Silent","Silky","Silver","Simple","Sincere","Smart","Smiling","Solid","Somber","Spanish","Special","Speedy","Spicy","Spiky","Spooky","Spry","Square","Squeaky","Stable","Stark","Starry","Steady","Steel","Stormy","Stout","Strange","Strong","Sturdy","Stylish","Subtle","Sugary","Sunny","Super","Supreme","Sweet","Swift","Tall","Tangy","Thrifty","Tidy","Total","Tough","Tricky","True","Trusty","Ultra","Urban","Utopian","Velvety","Vibrant","Vicious","Violet","Vital","Vivid","Wacky","Wealthy","Wild","Willing","Windy","Winged","Wise","Witty","Wooden","Worldly","Worthy","Young","Zesty","Zippy"] }';
  local NOUNS_DOCUMENT='{ "_id": "nouns", "list": ["Ant","Ape","Apple","Apricot","Avocado","Badger","Banana","Bat","Bear","Beaver","Bee","Beetle","Berry","Bird","Bison","Black","Boa","Boar","Bobcat","Buffalo","Bull","Bulldog","Buzzard","Camel","Caribou","Carp","Cat","Catfish","Cattle","Centaur","Cheetah","Cherry","Chimp","Clam","Cobra","Coconut","Cod","Coral","Cow","Coyote","Crab","Crane","Cricket","Crow","Cyclops","Deer","Dingo","Dogfish","Dolphin","Dove","Dragon","Duck","Eagle","Eel","Elk","Emu","Falcon","Ferret","Fig","Firefly","Fish","Flea","Fly","Fowl","Fox","Frog","Gazelle","Gerbil","Ghost","Giraffe","Gnat","Gnu","Goat","Goose","Gopher","Gorilla","Grape","Griffin","Gull","Hamster","Hare","Harrier","Hawk","Herring","Hippo","Hornet","Horse","Hound","Human","Hydra","Hyena","Iguana","Impala","Insect","Jackal","Jaguar","Kite","Kiwi","Koala","Lark","Leech","Lemming","Lemon","Lemur","Leopard","Lime","Lion","Llama","Lobster","Locust","Lychee","Lynx","Macaw","Mammal","Mammoth","Mango","Mastiff","Medusa","Melon","Mink","Mole","Monkey","Monster","Moose","Moth","Mouse","Mule","Mussel","Octopus","Orca","Oryx","Ostrich","Otter","Owl","Ox","Oyster","Panda","Panther","Papaya","Parrot","Peach","Peacock","Peafowl","Pear","Pegasus","Pelican","Penguin","Phoenix","Pigeon","Piranha","Plum","Pointer","Pony","Poodle","Prawn","Primate","Puma","Python","Quail","Rabbit","Raccoon","Ram","Raven","Robin","Rodent","Rooster","Salmon","Sardine","Sawfish","Scallop","Seal","Shark","Sheep","Shrew","Shrimp","Snail","Spaniel","Sparrow","Sphinx","Spider","Spirit","Squid","Stork","Swan","Terrier","Thrush","Tiger","Toad","Trout","Tuna","Turkey","Turtle","Vampire","Viper","Walrus","Warthog","Wasp","Whale","Wildcat","Wolf","Wombat","Yak","Zebra"] }';

  local DOCUMENTS=("${ADJECTIVES_DOCUMENT}" "${NOUNS_DOCUMENT}")

  for document in "${DOCUMENTS[@]}"; do
    echo -e "\n${YELLOW}Inserting document '${document:0:50}...' ...${RC}\n"

    local command="curl --silent -X POST --header 'Content-Type: application/json;charset=UTF-8' --header 'Accept: application/json;charset=UTF-8' --header 'X-GS-JWT: ${JWT}' -d '${document}' ${STAGE_BASE_URL}/restv2/game/${API_KEY}/mongo/collection/script.${COLLECTION}/insert"
    echo -e "> ${CYAN}${command}${RC}\n"

    local response
    response="$(eval "${command}")"

    # Pretty print JSON reponse
    eval "echo '${response}' | jq '.'"
  done
}

create_player_tag_counter_collection() {
  local COLLECTION="playerTagCounter";
  echo -e "${MAGENTA}Creating runtime collection 'script.${COLLECTION}' ...${RC}\n"

  local command="curl --silent -X POST --header 'Content-Type: application/json;charset=UTF-8' --header 'Accept: application/json' --header 'X-GS-JWT: ${JWT}' ${STAGE_BASE_URL}/restv2/game/${API_KEY}/mongo/collection/${COLLECTION}/runtime"
  echo -e "> ${CYAN}${command}${RC}\n"

  local response
  response="$(eval "${command}")"

  # Pretty print JSON reponse
  eval "echo '${response}' | jq '.'"

  local DOCUMENT='{ "_id": "playerTagCounter", "counter": 0 }'

  echo -e "\n${YELLOW}Inserting document '${DOCUMENT:0:50}...' ...${RC}\n"

  local command="curl --silent -X POST --header 'Content-Type: application/json;charset=UTF-8' --header 'Accept: application/json;charset=UTF-8' --header 'X-GS-JWT: ${JWT}' -d '${DOCUMENT}' ${STAGE_BASE_URL}/restv2/game/${API_KEY}/mongo/collection/script.${COLLECTION}/insert"
  echo -e "> ${CYAN}${command}${RC}\n"

  local response
  response="$(eval "${command}")"

  # Pretty print JSON reponse
  eval "echo '${response}' | jq '.'"
}

init_nosql() {
  echo -e "${MAGENTA}Initializing NoSQL database...${RC}\n"

  create_name_generator_data_collection
  create_player_tag_counter_collection
}

main() {
  check_dependencies

  discover_endpoints
  echo -e '\n--------------------\n'
  auth_nosql
  echo -e '\n--------------------\n'
  list_collections
  echo -e '\n--------------------\n'
  nuke_nosql
  echo -e '\n--------------------\n'
  init_nosql
}

main "$@"
